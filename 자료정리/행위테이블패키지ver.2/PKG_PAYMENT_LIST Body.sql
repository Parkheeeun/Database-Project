create or replace NONEDITIONABLE PACKAGE BODY PKG_PAYMENT_HISTORY AS

  --결제내역 등록 프로시저
  PROCEDURE PROC_INS_PAYMENT_LIST
  (
    IN_ORDER_ID         IN VARCHAR2,
    IN_PAY_PRICE        IN VARCHAR2,
    IN_PAYMENT_COM_ID   IN VARCHAR2,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    V_NEW_PAY_IDX       INTEGER;
    CNT_ORDER_ID        NUMBER;
    CNT_COM_ID          NUMBER;
    
    V_USER_ID           CHAR(6);
    V_USER_POINT        NUMBER;
    
    V_POINT_USE         CHAR(1);
    
    ORDER_DATA_EXCEPT   EXCEPTION;
    PAYMENT_DATA_EXCEPT EXCEPTION;
    
    USE_POINT_EXCEPT    EXCEPTION;
    NO_USE_POINT_EXCEPT EXCEPTION;
    MIN_POINT_EXCEPT    EXCEPTION;
  
  BEGIN
    
    SELECT TO_NUMBER(NVL(MAX(PAYMENT_IDX), 0)) + 1
    INTO V_NEW_PAY_IDX
    FROM PAYMENT_HISTORY_TBL;
    
    INSERT INTO PAYMENT_HISTORY_TBL(PAYMENT_IDX,ORDER_ID,FINAL_PRICE,PAY_GRP_ID,PAY_COM_ID)
    VALUES(V_NEW_PAY_IDX,IN_ORDER_ID,TO_NUMBER(IN_PAY_PRICE),'GRP003',IN_PAYMENT_COM_ID);
    
    --주문ID가 없는 경우
    SELECT COUNT(*)
    INTO CNT_ORDER_ID
    FROM ORDER_LIST_TBL
    WHERE ORDER_ID = IN_ORDER_ID;
    
    --지불방법이 없는 경우
    SELECT COUNT(*)
    INTO CNT_COM_ID
    FROM COMMON_TBL
    WHERE COM_ID = IN_PAYMENT_COM_ID
    AND GRP_ID = 'GRP003' AND PARENT_ID = 'COM000';
    
    --주문목록에서 포인트 사용여부를 체크했을 경우에만 사용 가능하도록
    SELECT USE_POINT
    INTO V_POINT_USE
    FROM ORDER_LIST_TBL
    WHERE ORDER_ID = IN_ORDER_ID;
    
    --고객이 가지고 있는 포인트 내에서만 사용 가능하도록
    --1. 해당 주문을 한 고객ID 찾기
    SELECT MAX(T1.USER_ID)
    INTO V_USER_ID
    FROM ORDER_TBL T1, ORDER_LIST_TBL T2
    WHERE T1.ORDER_ID = T2.ORDER_ID
    AND T1.ORDER_ID = IN_ORDER_ID;
    
    --2. 고객이 가지고 있는 포인트 찾기
    SELECT USER_POINT
    INTO V_USER_POINT
    FROM USER_TBL
    WHERE USER_ID = V_USER_ID;
    
    --3. 고객이 가지고 있는 포인트와 사용 포인트 비교
    IF V_USER_POINT < IN_PAY_PRICE THEN
        RAISE USE_POINT_EXCEPT;
    END IF;
    
    --고객이 가지고 있는 포인트가 3000점 이상일 때만 사용 가능하도록
    IF V_USER_POINT < 3000 THEN
        RAISE MIN_POINT_EXCEPT;
    END IF;
    
    IF CNT_ORDER_ID = 0 THEN
        RAISE ORDER_DATA_EXCEPT;
    ELSIF CNT_COM_ID = 0 THEN
        RAISE PAYMENT_DATA_EXCEPT;
    ELSIF V_POINT_USE = 'N' THEN
        RAISE NO_USE_POINT_EXCEPT;
    END IF;
    
    EXCEPTION
    WHEN ORDER_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_ORDER_ID';
    O_ERRMSG := '주문ID가 존재하지 않습니다';
    ROLLBACK;
    
    WHEN PAYMENT_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_PAYMENT_COM_ID';
    O_ERRMSG := '해당 지불방법이 존재하지 않습니다';
    ROLLBACK;
    
    WHEN USE_POINT_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_USE_POINT';
    O_ERRMSG := '포인트가 부족합니다';
    ROLLBACK;
    
    WHEN NO_USE_POINT_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_N_USE_POINT';
    O_ERRMSG := '포인트 사용여부에 체크하지 않았습니다';
    ROLLBACK;
    
    WHEN MIN_POINT_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_3000_POINT';
    O_ERRMSG := '포인트 사용여부에 체크하지 않았습니다';
    ROLLBACK;
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;

  END PROC_INS_PAYMENT_LIST;
  
  --결제내역 조회 프로시저
  PROCEDURE PROC_SEL_PAYMENT_LIST
  (
    IN_ORDER_ID         IN VARCHAR2,
    IN_PAYMENT_COM_ID   IN VARCHAR2,
    O_CUR               OUT SYS_REFCURSOR,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    CNT_COM_ID      NUMBER;
  
  BEGIN
  
    OPEN O_CUR FOR
    SELECT *
    FROM PAYMENT_HISTORY_TBL
    WHERE ORDER_ID LIKE '%' || IN_ORDER_ID || '%'
    AND PAY_COM_ID LIKE '%' || IN_PAYMENT_COM_ID || '%';
    
    EXCEPTION
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_SEL_PAYMENT_LIST;
  
  --결제내역 수정 프로시저
  PROCEDURE PROC_UP_PAYMENT_LIST
  (
    IN_PAY_IDX          IN VARCHAR2,
    IN_PAY_PRICE        IN VARCHAR2,
    IN_PAYMENT_COM_ID   IN VARCHAR2,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    CNT_COM_ID          NUMBER;
    
    PAYMENT_DATA_EXCEPT EXCEPTION;
    
  BEGIN
  
    UPDATE PAYMENT_HISTORY_TBL
    SET FINAL_PRICE = IN_PAY_PRICE,
        PAY_COM_ID = IN_PAYMENT_COM_ID
    WHERE PAYMENT_IDX = IN_PAY_IDX;
    
    --지불방법이 없는 경우
    SELECT COUNT(*)
    INTO CNT_COM_ID
    FROM COMMON_TBL
    WHERE COM_ID = IN_PAYMENT_COM_ID
    AND GRP_ID = 'GRP003' AND PARENT_ID = 'COM000';
    
    IF CNT_COM_ID = 0 THEN
        RAISE PAYMENT_DATA_EXCEPT;
    END IF;
    
    EXCEPTION
    WHEN PAYMENT_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_PAYMENT_COM_ID';
    O_ERRMSG := '해당 지불방법이 존재하지 않습니다';
    ROLLBACK;
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
  
  END PROC_UP_PAYMENT_LIST;
  
  --결제내역 삭제 프로시저
  PROCEDURE PROC_DEL_PAYMENT_LIST
  (
    IN_PAY_IDX          IN VARCHAR2,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    V_ORDER_ID      CHAR;
  
  BEGIN
    
    SELECT ORDER_ID
    INTO V_ORDER_ID
    FROM PAYMENT_HISTORY_TBL
    WHERE PAYMENT_IDX = IN_PAY_IDX;
    
    --결제내역 중 하나를 삭제하면 주문번호가 같은 결제내역이 모두 삭제되도록
    DELETE FROM PAYMENT_HISTORY_TBL
    WHERE PAYMENT_IDX = IN_PAY_IDX
    AND ORDER_ID = V_ORDER_ID;
    
    UPDATE ORDER_LIST_TBL
    SET ORDER_STATUS = '취소';
    
    EXCEPTION
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_DEL_PAYMENT_LIST;

END PKG_PAYMENT_HISTORY;