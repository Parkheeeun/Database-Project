create or replace NONEDITIONABLE PACKAGE BODY PKG_ORDER AS

  --주문 등록 프로시저
  PROCEDURE PROC_INS_ORDER
  (
    IN_ORDER_ID        IN VARCHAR2,
    IN_USER_ID         IN VARCHAR2,
    IN_STORE_ID        IN VARCHAR2,
    IN_MENU_ID         IN VARCHAR2,
    IN_QUANTITY       IN VARCHAR2,
    IN_TAKE_OUT        IN VARCHAR2,
    IN_ORDER_DATE      IN VARCHAR2,
    O_ERRCODE          OUT VARCHAR2,
    O_ERRMSG           OUT VARCHAR2
  ) AS
  
    V_NEW_ORDER_IDX     INTEGER;
    CNT_USER_ID         NUMBER;
    CNT_STORE_ID        NUMBER;
    CNT_STORE_M_ID      NUMBER;
    
    USER_DATA_EXCEPT    EXCEPTION;
    STORE_DATA_EXCEPT   EXCEPTION;
    STORE_M_DATA_EXCEPT EXCEPTION;
    ORDER_TIME_EXCEPT   EXCEPTION;
  
  BEGIN
  
    SELECT TO_NUMBER(NVL(MAX(ORDER_IDX), 0)) + 1
    INTO V_NEW_ORDER_IDX
    FROM ORDER_TBL;
    
    INSERT INTO ORDER_TBL(ORDER_IDX,ORDER_ID,USER_ID,STORE_ID,MENU_ID,QUANTITY,TAKE_OUT,ORDER_DATE)
    VALUES(V_NEW_ORDER_IDX,IN_ORDER_ID,IN_USER_ID,IN_STORE_ID,IN_MENU_ID,IN_QUANTITY,IN_TAKE_OUT,TO_DATE(IN_ORDER_DATE,'YYYY-MM-DD HH24:MI:SS'));
    
    --고객이 존재하지 않을 경우
    SELECT COUNT(*)
    INTO CNT_USER_ID
    FROM USER_TBL
    WHERE USER_ID = IN_USER_ID;
    
    --가게가 존재하지 않을 경우
    SELECT COUNT(*)
    INTO CNT_STORE_ID
    FROM STORE_TBL
    WHERE STORE_ID = IN_STORE_ID;
    
    --가게에 없는 메뉴를 주문할 경우
    SELECT COUNT(*)
    INTO CNT_STORE_M_ID
    FROM MENU_TBL
    WHERE MENU_ID = IN_MENU_ID AND STORE_ID = IN_STORE_ID;
    
    IF CNT_USER_ID = 0 THEN
        RAISE USER_DATA_EXCEPT;
    ELSIF CNT_STORE_ID = 0 THEN
        RAISE STORE_DATA_EXCEPT;
    ELSIF CNT_STORE_M_ID = 0 THEN
        RAISE STORE_M_DATA_EXCEPT;
    
    END IF;
    
    EXCEPTION
    WHEN USER_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_USER';
    O_ERRMSG := '고객 데이터가 없습니다';
    ROLLBACK;
    
    WHEN STORE_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_STORE';
    O_ERRMSG := '가게 데이터가 없습니다';
    ROLLBACK;
    
    WHEN STORE_M_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_STMENU';
    O_ERRMSG := '메뉴 데이터 또는 가게에 해당 메뉴가 없습니다';
    ROLLBACK;
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
    --영업시간 외에 주문할 경우**
    
  END PROC_INS_ORDER;
  
  --주문 조회 프로시저
  PROCEDURE PROC_SEL_ORDER
  (
    IN_ORDER_ID        IN VARCHAR2,
    IN_USER_ID         IN VARCHAR2,
    IN_STORE_ID        IN VARCHAR2,
    IN_MENU_ID         IN VARCHAR2,
    O_CUR              OUT SYS_REFCURSOR,
    O_ERRCODE          OUT VARCHAR2,
    O_ERRMSG           OUT VARCHAR2
  ) AS
  
  BEGIN
    
    OPEN O_CUR FOR
    SELECT * 
    FROM ORDER_TBL
    WHERE ORDER_ID LIKE '%' || IN_ORDER_ID || '%'
    AND USER_ID LIKE '%' || IN_USER_ID || '%'
    AND STORE_ID LIKE '%' || IN_STORE_ID || '%'
    AND MENU_ID LIKE '%' || IN_MENU_ID || '%';
    
    EXCEPTION
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_SEL_ORDER;
  
  --주문 수정 프로시저
  PROCEDURE PROC_UP_ORDER
  (
    IN_ORDER_IDX       IN VARCHAR2,
    IN_ORDER_ID        IN VARCHAR2,
    IN_USER_ID         IN VARCHAR2,
    IN_STORE_ID        IN VARCHAR2,
    IN_MENU_ID         IN VARCHAR2,
    IN_QUANTITY       IN VARCHAR2,
    IN_TAKE_OUT        IN VARCHAR2,
    IN_ORDER_DATE      IN VARCHAR2,
    O_ERRCODE          OUT VARCHAR2,
    O_ERRMSG           OUT VARCHAR2
  ) AS
  
    CNT_USER_ID     NUMBER;
    CNT_STORE_ID    NUMBER;
    CNT_STORE_M_ID  NUMBER;
    
    USER_DATA_EXCEPT    EXCEPTION;
    STORE_DATA_EXCEPT   EXCEPTION;
    STORE_M_DATA_EXCEPT EXCEPTION;
  
  BEGIN
    
    UPDATE ORDER_TBL 
    SET USER_ID = IN_USER_ID,
        STORE_ID = IN_STORE_ID,
        MENU_ID = IN_MENU_ID,
        QUANTITY = TO_NUMBER(IN_QUANTITY),
        TAKE_OUT = IN_TAKE_OUT,
        ORDER_DATE = TO_DATE(IN_ORDER_DATE, 'YYYY-MM-DD HH24:MI:SS')
    WHERE ORDER_IDX = TO_NUMBER(IN_ORDER_IDX);
    
    --수령방법은 주문ID가 같은 건을 한 번에 업데이트
    UPDATE ORDER_TBL 
    SET TAKE_OUT = IN_TAKE_OUT
    WHERE ORDER_ID = IN_ORDER_ID;
    
    --고객이 존재하지 않을 경우
    SELECT COUNT(*)
    INTO CNT_USER_ID
    FROM USER_TBL
    WHERE USER_ID = IN_USER_ID;
    
    --가게가 존재하지 않을 경우
    SELECT COUNT(*)
    INTO CNT_STORE_ID
    FROM STORE_TBL
    WHERE STORE_ID = IN_STORE_ID;
    
    --가게에 없는 메뉴를 주문할 경우
    SELECT COUNT(*)
    INTO CNT_STORE_M_ID
    FROM MENU_TBL
    WHERE MENU_ID = IN_MENU_ID AND STORE_ID = IN_STORE_ID;
    
    EXCEPTION
    WHEN USER_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_USER';
    O_ERRMSG := '고객 데이터가 없습니다';
    ROLLBACK;
    
    WHEN STORE_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_STORE';
    O_ERRMSG := '가게 데이터가 없습니다';
    ROLLBACK;
    
    WHEN STORE_M_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_OR_NO_STMENU';
    O_ERRMSG := '메뉴 데이터 또는 가게에 해당 메뉴가 없습니다';
    ROLLBACK;
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_UP_ORDER;
  
  --주문 삭제 프로시저
    PROCEDURE PROC_DEL_ORDER
    (
        INS_ORDER_ID IN VARCHAR2,
        O_ERRCODE OUT VARCHAR2,
        O_ERRMSG OUT VARCHAR2
    ) AS
    V_ORDER_CNT NUMBER(1);
    V_ORLIST_CNT NUMBER(1);
    V_DORDER_CNT NUMBER(1);
    V_PAYMENT_CNT NUMBER(1);
    V_POINT_CNT NUMBER(1);
    
    ORDER_EXCEPTION EXCEPTION;--
    ORDERLIST_EXCEPTION EXCEPTION;
    DELIVERY_ORDER_EXCEPTION EXCEPTION;
    PAYMENT_EXCEPTION EXCEPTION;
    POINT_EXCEPTION EXCEPTION;
    
      BEGIN
    --배달오더삭제
        SELECT DECODE(MAX(ORDER_ID),NULL,0,1) INTO V_DORDER_CNT FROM ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
            IF V_DORDER_CNT=0 THEN
            RAISE DELIVERY_ORDER_EXCEPTION;
            ELSE 
            DELETE DELIVERY_ORDER_TBL A WHERE EXISTS( SELECT 1 FROM ORDER_TBL B WHERE A.ORDER_ID=B.ORDER_ID AND A.ORDER_ID=INS_ORDER_ID);
            END IF;
    --포인트적립내역삭제
      SELECT DECODE(MAX(ORDER_ID),NULL,0,1)INTO V_POINT_CNT FROM ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
         IF V_POINT_CNT=0 THEN
         RAISE POINT_EXCEPTION;
         ELSE
         DELETE FROM EARN_POINT_HISTORY_TBL A WHERE EXISTS(SELECT 1 FROM ORDER_TBL B WHERE A.ORDER_ID=B.ORDER_ID AND B.ORDER_ID=INS_ORDER_ID);
         END IF;
    --결제내역삭제
      SELECT DECODE(MAX(ORDER_ID),NULL,0,1)INTO V_PAYMENT_CNT FROM ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
          IF V_PAYMENT_CNT=0 THEN
          RAISE PAYMENT_EXCEPTION;
          ELSE
          DELETE FROM PAYMENT_HISTORY_TBL A WHERE EXISTS(SELECT 1 FROM ORDER_TBL B WHERE A.ORDER_ID=B.ORDER_ID AND B.ORDER_ID=INS_ORDER_ID);
          END IF;
       --주문목록삭제
      SELECT DECODE(MAX(ORDER_ID),NULL,0,1)INTO V_ORLIST_CNT FROM ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
        IF V_ORLIST_CNT=0 THEN
        RAISE ORDERLIST_EXCEPTION;
        ELSE
        DELETE FROM ORDER_LIST_TBL A WHERE EXISTS (SELECT 1 FROM ORDER_TBL B WHERE A.ORDER_ID=B.ORDER_ID AND B.ORDER_ID=INS_ORDER_ID);
        END IF;
         --주문상세데이터삭제
       SELECT DECODE(MAX(ORDER_ID),NULL,0,1) INTO V_ORDER_CNT FROM ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
           IF V_ORDER_CNT=0 THEN 
           RAISE ORDER_EXCEPTION;
           ELSE
           DELETE ORDER_TBL WHERE ORDER_ID=INS_ORDER_ID;
           END IF;
           
    --주문상세데이터가없을시 경고문출력
       EXCEPTION WHEN ORDER_EXCEPTION THEN
       O_ERRCODE:='ERR001';
       O_ERRMSG:='존재하지않은 주문상세데이터입니다';
       ROLLBACK;
    --주문목록데이터가없을시 경고문출력
       WHEN ORDERLIST_EXCEPTION THEN
       O_ERRCODE:='ERR002';
       O_ERRMSG:='존재하지않는 주문목록데이터입니다.';
    --결제내역데이터가없을시 경고문출력
      WHEN PAYMENT_EXCEPTION THEN
      O_ERRCODE:='ERR003';
      O_ERRMSG:='존재하지않는 결제내역데이터입니다.';
    --포인트적립내역데이터가 없을시 경고문출력
      WHEN POINT_EXCEPTION THEN
      O_ERRCODE:='ERR004';
      O_ERRMSG:='존재하지않는 포인트적립데이터입니다.';
    --배달오더데이터가 없을시 경고문출력
       WHEN DELIVERY_ORDER_EXCEPTION THEN
       O_ERRCODE:='ERR005';
       O_ERRMSG:='존재하지않는 배달오더데이터입니다.';
       WHEN OTHERS THEN
       O_ERRCODE:=SQLCODE;
       O_ERRMSG:=SQLERRM;
       
  END PROC_DEL_ORDER;
  

END PKG_ORDER;