create or replace NONEDITIONABLE PACKAGE BODY PKG_ORDER_LIST AS

  --주문목록 등록 프로시저
  PROCEDURE PROC_INS_ORDER_LIST
  (
    IN_ORDER_ID         IN VARCHAR2,
    IN_POINT_USE        IN VARCHAR2,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    CNT_ORDER_ID        NUMBER;
    V_NEW_TOTAL_PRICE   NUMBER;
    V_STATUS_TAKE_OUT   CHAR(1);
    
    V_MIN_PRICE NUMBER(7);
    CHECK_CNT NUMBER(1);

    ORDER_ID_DATA_EXCEPT     EXCEPTION;
    S_MIN_PRICE_EXCEPTION EXCEPTION;
  
  BEGIN
    
    --총주문가격 계산
    SELECT SUM(T2.MENU_PRICE * T1.QUANTITY)
    INTO V_NEW_TOTAL_PRICE
    FROM ORDER_TBL T1,  MENU_TBL T2
    WHERE T1.STORE_ID = T2.STORE_ID AND T1.MENU_ID = T2.MENU_ID;
    
    --포장인지 배달인지 판단
    SELECT MAX(TAKE_OUT)
    INTO V_STATUS_TAKE_OUT
    FROM ORDER_TBL
    WHERE ORDER_ID = IN_ORDER_ID
    GROUP BY TAKE_OUT;
    
    --TAKE_OUT O 포장인 경우
    IF V_STATUS_TAKE_OUT = 'O' THEN
        INSERT INTO ORDER_LIST_TBL(ORDER_ID,DELIVERY_FEE,TOTAL_PRICE,USE_POINT,ORDER_STATUS)
        VALUES(IN_ORDER_ID,0,V_NEW_TOTAL_PRICE,IN_POINT_USE,'A');
    
    --TAKE_OUT X 배달인 경우
    ELSIF V_STATUS_TAKE_OUT = 'X' THEN
        INSERT INTO ORDER_LIST_TBL(ORDER_ID,DELIVERY_FEE,TOTAL_PRICE,USE_POINT,ORDER_STATUS)
        VALUES(IN_ORDER_ID,2000,V_NEW_TOTAL_PRICE,IN_POINT_USE,'A');
    
    END IF;
    
    SELECT MAX(A.MIN_PRICE) INTO V_MIN_PRICE FROM STORE_TBL A, --주문한 가게의 최소주문금액가져오기
    (
        SELECT T2.STORE_ID,T2.ORDER_ID FROM ORDER_LIST_TBL T1, ORDER_TBL T2 WHERE T1.ORDER_ID=T2.ORDER_ID
    )B WHERE A.STORE_ID=B.STORE_ID AND B.ORDER_ID=IN_ORDER_ID;
      
    SELECT COUNT(*) INTO CHECK_CNT FROM ORDER_LIST_TBL WHERE V_NEW_TOTAL_PRICE>V_MIN_PRICE; --최소주문금액의 조건을 맞춘 주문카운트
    
    IF CHECK_CNT=0 THEN --최소주문금액미달이면 경고문구출력하고 그 주문을 삭제
    RAISE S_MIN_PRICE_EXCEPTION;
    
    END IF;
    
    --주문ID가 없는 경우
    SELECT COUNT(*)
    INTO CNT_ORDER_ID
    FROM ORDER_TBL
    WHERE ORDER_ID = IN_ORDER_ID;
    
    IF CNT_ORDER_ID = 0 THEN
        RAISE ORDER_ID_DATA_EXCEPT;
    END IF;
    
    EXCEPTION
    WHEN ORDER_ID_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_ORDER_ID';
    O_ERRMSG := '주문ID가 존재하지 않습니다';
    ROLLBACK;
    
    WHEN S_MIN_PRICE_EXCEPTION THEN
   O_ERRCODE:='ERR001';
   O_ERRMSG:='최소주문금액이상 주문해야합니다.';
   DELETE ORDER_LIST_TBL WHERE ORDER_ID=IN_ORDER_ID; --주문을 삭제해버릴까 아님 주문상태를 취소로해서 데이터를넣을까 고민.
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_INS_ORDER_LIST;

  
  --주문목록 조회 프로시저
  PROCEDURE PROC_SEL_ORDER_LIST
  (
    IN_ORDER_ID         IN VARCHAR2,
    IN_DELIVERY_FEE     IN VARCHAR2,
    IN_POINT_USE         IN VARCHAR2,
    IN_ORDER_STATUS     IN VARCHAR2,
    O_CUR               OUT SYS_REFCURSOR,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
  BEGIN
  
    OPEN O_CUR FOR
    SELECT *
    FROM ORDER_LIST_TBL
    WHERE ORDER_ID LIKE '%' || IN_ORDER_ID || '%'
    AND DELIVERY_FEE LIKE '%' || IN_DELIVERY_FEE || '%'
    AND USE_POINT LIKE '%' || IN_POINT_USE || '%'
    AND ORDER_STATUS LIKE '%' || IN_ORDER_STATUS || '%';
    
    EXCEPTION
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
  
  END PROC_SEL_ORDER_LIST;
  
  --주문목록 수정 프로시저
  PROCEDURE PROC_UP_ORDER_LIST
  (
    IN_ORDER_ID         IN VARCHAR2,
    IN_POINT_USE        IN VARCHAR2,
    O_ERRCODE           OUT VARCHAR2,
    O_ERRMSG            OUT VARCHAR2
  ) AS
  
    CNT_ORDER_ID            NUMBER;
    ORDER_ID_DATA_EXCEPT    EXCEPTION;
  
  BEGIN
    
    UPDATE ORDER_LIST_TBL
    SET USE_POINT = IN_POINT_USE
    WHERE ORDER_ID = IN_ORDER_ID;
    
    --주문ID가 없는 경우
    SELECT COUNT(*)
    INTO CNT_ORDER_ID
    FROM ORDER_TBL
    WHERE ORDER_ID = IN_ORDER_ID;
    
    IF CNT_ORDER_ID = 0 THEN
        RAISE ORDER_ID_DATA_EXCEPT;
    END IF;
    
    EXCEPTION
    WHEN ORDER_ID_DATA_EXCEPT THEN
    O_ERRCODE := 'ERR_NO_ORDER_ID';
    O_ERRMSG := '주문ID가 존재하지 않습니다';
    ROLLBACK;
    
    WHEN OTHERS THEN
    O_ERRCODE := SQLCODE;
    O_ERRMSG := SQLERRM;
    
  END PROC_UP_ORDER_LIST;

END PKG_ORDER_LIST;